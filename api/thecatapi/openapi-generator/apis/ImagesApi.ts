/* tslint:disable */
/* eslint-disable */
/**
 * Cat API
 * ![cat-api-logo](https://thecatapi.com/_app/immutable/assets/thecatapi-logo.78868573.svg)  ## An open, free, read & write API all about Cats The Cat API gives you access to 10000\'s of Cat images, and breeds. - Upload your own Images - Get detailed info on all Cat Breeds - Allow your Users to Favourite or Vote on Images - Save a custom value with each request so you can match data to your Users  ## How do i get access? Just sign up for an API Key from https://thecatapi.com for free. We\'re looking forward to seeing what you build! Don\'t forget to checkout it\'s sister API - TheDogAPI.com
 *
 * The version of the OpenAPI document: 1.6.3
 * Contact: aden@thatapicompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ImagesListSearchOrRandom200ResponseInner,
} from '../models/index';
import {
    ImagesListSearchOrRandom200ResponseInnerFromJSON,
    ImagesListSearchOrRandom200ResponseInnerToJSON,
} from '../models/index';

export interface ImagesBkIEhN3pGGetRequest {
    xApiKey?: string;
}

export interface ImagesGetRequest {
    xApiKey: string;
    contentType?: string;
    limit?: number;
    page?: number;
    order?: string;
}

export interface ImagesImageIdBreedsBreedIdDeleteRequest {
    xApiKey: string;
    imageId: string;
    breedId: string;
    contentType?: string;
}

export interface ImagesImageIdBreedsGetRequest {
    imageId: string;
    contentType?: string;
}

export interface ImagesImageIdBreedsPostRequest {
    xApiKey: string;
    imageId: string;
    contentType?: string;
    body?: object;
}

export interface ImagesImageIdDeleteRequest {
    imageId: string;
    contentType?: string;
    xApiKey?: string;
}

export interface ImagesListSearchOrRandomRequest {
    contentType?: string;
    xApiKey?: string;
    size?: string;
    mimeTypes?: string;
    format?: string;
    hasBreeds?: boolean;
    order?: string;
    page?: number;
    limit?: number;
}

export interface ImagesUploadPostRequest {
    xApiKey: string;
    contentType?: string;
    file?: Blob;
    subId?: string;
    breedIds?: string;
}

/**
 * 
 */
export class ImagesApi extends runtime.BaseAPI {

    /**
     * Get the raw analysis results for any uploaded image
     * /images/:image_id/analysis
     */
    async imagesBkIEhN3pGGetRaw(requestParameters: ImagesBkIEhN3pGGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xApiKey'] != null) {
            headerParameters['x-api-key'] = String(requestParameters['xApiKey']);
        }

        const response = await this.request({
            path: `/images/BkIEhN3pG`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the raw analysis results for any uploaded image
     * /images/:image_id/analysis
     */
    async imagesBkIEhN3pGGet(requestParameters: ImagesBkIEhN3pGGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.imagesBkIEhN3pGGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Only returns images from your account, uploaded via \'api/v1/images/upload\'
     * /images/ (Your uploads)
     */
    async imagesGetRaw(requestParameters: ImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['xApiKey'] == null) {
            throw new runtime.RequiredError(
                'xApiKey',
                'Required parameter "xApiKey" was null or undefined when calling imagesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xApiKey'] != null) {
            headerParameters['x-api-key'] = String(requestParameters['xApiKey']);
        }

        const response = await this.request({
            path: `/images/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Only returns images from your account, uploaded via \'api/v1/images/upload\'
     * /images/ (Your uploads)
     */
    async imagesGet(requestParameters: ImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.imagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * /images/:image_id/breeds/:breed_id
     */
    async imagesImageIdBreedsBreedIdDeleteRaw(requestParameters: ImagesImageIdBreedsBreedIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xApiKey'] == null) {
            throw new runtime.RequiredError(
                'xApiKey',
                'Required parameter "xApiKey" was null or undefined when calling imagesImageIdBreedsBreedIdDelete().'
            );
        }

        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling imagesImageIdBreedsBreedIdDelete().'
            );
        }

        if (requestParameters['breedId'] == null) {
            throw new runtime.RequiredError(
                'breedId',
                'Required parameter "breedId" was null or undefined when calling imagesImageIdBreedsBreedIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xApiKey'] != null) {
            headerParameters['x-api-key'] = String(requestParameters['xApiKey']);
        }

        const response = await this.request({
            path: `/images/{image_id}/breeds/{breed_id}`.replace(`{${"image_id"}}`, encodeURIComponent(String(requestParameters['imageId']))).replace(`{${"breed_id"}}`, encodeURIComponent(String(requestParameters['breedId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * /images/:image_id/breeds/:breed_id
     */
    async imagesImageIdBreedsBreedIdDelete(requestParameters: ImagesImageIdBreedsBreedIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.imagesImageIdBreedsBreedIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * /images/:image_id/breeds
     */
    async imagesImageIdBreedsGetRaw(requestParameters: ImagesImageIdBreedsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling imagesImageIdBreedsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        const response = await this.request({
            path: `/images/{image_id}/breeds`.replace(`{${"image_id"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * /images/:image_id/breeds
     */
    async imagesImageIdBreedsGet(requestParameters: ImagesImageIdBreedsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.imagesImageIdBreedsGetRaw(requestParameters, initOverrides);
    }

    /**
     * /images/:image_id/breeds
     */
    async imagesImageIdBreedsPostRaw(requestParameters: ImagesImageIdBreedsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xApiKey'] == null) {
            throw new runtime.RequiredError(
                'xApiKey',
                'Required parameter "xApiKey" was null or undefined when calling imagesImageIdBreedsPost().'
            );
        }

        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling imagesImageIdBreedsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xApiKey'] != null) {
            headerParameters['x-api-key'] = String(requestParameters['xApiKey']);
        }

        const response = await this.request({
            path: `/images/{image_id}/breeds`.replace(`{${"image_id"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * /images/:image_id/breeds
     */
    async imagesImageIdBreedsPost(requestParameters: ImagesImageIdBreedsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.imagesImageIdBreedsPostRaw(requestParameters, initOverrides);
    }

    /**
     * /images/:image_id
     */
    async imagesImageIdDeleteRaw(requestParameters: ImagesImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling imagesImageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xApiKey'] != null) {
            headerParameters['x-api-key'] = String(requestParameters['xApiKey']);
        }

        const response = await this.request({
            path: `/images/{image_id}`.replace(`{${"image_id"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * /images/:image_id
     */
    async imagesImageIdDelete(requestParameters: ImagesImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.imagesImageIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Searches or returns Random selection from all approved images. Default is to return RANDOM images, but with an API-Key you can use \'order=DESC\' or \'order=ASC\' along with the \'page\' and \'limit\' parameters to paginate through them in the order they were approved.  Pagination-Count, Pagination-Page, and Pagination-Limit headers are present in the response so you know the total number of images that can be paginated through for the passed search filters.
     * /images/search
     */
    async imagesListSearchOrRandomRaw(requestParameters: ImagesListSearchOrRandomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ImagesListSearchOrRandom200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['mimeTypes'] != null) {
            queryParameters['mime_types'] = requestParameters['mimeTypes'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['hasBreeds'] != null) {
            queryParameters['has_breeds'] = requestParameters['hasBreeds'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xApiKey'] != null) {
            headerParameters['x-api-key'] = String(requestParameters['xApiKey']);
        }

        const response = await this.request({
            path: `/images/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImagesListSearchOrRandom200ResponseInnerFromJSON));
    }

    /**
     * Searches or returns Random selection from all approved images. Default is to return RANDOM images, but with an API-Key you can use \'order=DESC\' or \'order=ASC\' along with the \'page\' and \'limit\' parameters to paginate through them in the order they were approved.  Pagination-Count, Pagination-Page, and Pagination-Limit headers are present in the response so you know the total number of images that can be paginated through for the passed search filters.
     * /images/search
     */
    async imagesListSearchOrRandom(requestParameters: ImagesListSearchOrRandomRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ImagesListSearchOrRandom200ResponseInner>> {
        const response = await this.imagesListSearchOrRandomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Make sure you\'re using the right field to send the image, and Content-Type header
     * /images/upload
     */
    async imagesUploadPostRaw(requestParameters: ImagesUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['xApiKey'] == null) {
            throw new runtime.RequiredError(
                'xApiKey',
                'Required parameter "xApiKey" was null or undefined when calling imagesUploadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xApiKey'] != null) {
            headerParameters['x-api-key'] = String(requestParameters['xApiKey']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['subId'] != null) {
            formParams.append('sub_id', requestParameters['subId'] as any);
        }

        if (requestParameters['breedIds'] != null) {
            formParams.append('breed_ids', requestParameters['breedIds'] as any);
        }

        const response = await this.request({
            path: `/images/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Make sure you\'re using the right field to send the image, and Content-Type header
     * /images/upload
     */
    async imagesUploadPost(requestParameters: ImagesUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.imagesUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
