/* tslint:disable */
/* eslint-disable */
/**
 * Cat API
 * ![cat-api-logo](https://thecatapi.com/_app/immutable/assets/thecatapi-logo.78868573.svg)  ## An open, free, read & write API all about Cats The Cat API gives you access to 10000\'s of Cat images, and breeds. - Upload your own Images - Get detailed info on all Cat Breeds - Allow your Users to Favourite or Vote on Images - Save a custom value with each request so you can match data to your Users  ## How do i get access? Just sign up for an API Key from https://thecatapi.com for free. We\'re looking forward to seeing what you build! Don\'t forget to checkout it\'s sister API - TheDogAPI.com
 *
 * The version of the OpenAPI document: 1.6.3
 * Contact: aden@thatapicompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface BreedsBreedIdGetRequest {
    breedId: string;
    contentType?: string;
}

export interface BreedsGetRequest {
    xApiKey: string;
    contentType?: string;
    limit?: number;
    page?: number;
}

export interface BreedsSearchGetRequest {
    q?: string;
    attachImage?: number;
}

/**
 * 
 */
export class BreedsApi extends runtime.BaseAPI {

    /**
     * /breeds/:breed_id
     */
    async breedsBreedIdGetRaw(requestParameters: BreedsBreedIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['breedId'] == null) {
            throw new runtime.RequiredError(
                'breedId',
                'Required parameter "breedId" was null or undefined when calling breedsBreedIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        const response = await this.request({
            path: `/breeds/{breed_id}`.replace(`{${"breed_id"}}`, encodeURIComponent(String(requestParameters['breedId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * /breeds/:breed_id
     */
    async breedsBreedIdGet(requestParameters: BreedsBreedIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.breedsBreedIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * /breeds
     */
    async breedsGetRaw(requestParameters: BreedsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['xApiKey'] == null) {
            throw new runtime.RequiredError(
                'xApiKey',
                'Required parameter "xApiKey" was null or undefined when calling breedsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xApiKey'] != null) {
            headerParameters['x-api-key'] = String(requestParameters['xApiKey']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        const response = await this.request({
            path: `/breeds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * /breeds
     */
    async breedsGet(requestParameters: BreedsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.breedsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Breeds
     */
    async breedsSearchGetRaw(requestParameters: BreedsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['attachImage'] != null) {
            queryParameters['attach_image'] = requestParameters['attachImage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apikeyAuth authentication
        }

        const response = await this.request({
            path: `/breeds/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Search Breeds
     */
    async breedsSearchGet(requestParameters: BreedsSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.breedsSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
